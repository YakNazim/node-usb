# Configuration for the LPC2148
#
# For more information about the configuration files, take a look at:
# http://openfacts.berlios.de/index-en.phtml?title=OpenOCD_configuration
# http://www.nxp.com/acrobat_download/datasheets/LPC2141_42_44_46_48_3.pdf
#----------- Daemon Configuration

telnet_port     4444
gdb_port        3333
daemon_startup  attach   # Don't 'reset'! A reset will reset the JTAG chain

# For more information about the configuration files, take a look at:
# http://openfacts.berlios.de/index-en.phtml?title=Open+On-Chip+Debugger

# Tell gdb that you can use us to program the device (requires GDB >=6.7 and libexapt)
gdb_memory_map    enable
gdb_flash_program enable

#----------- JTAG Interface Type

interface   ft2232
jtag_speed  15       # JTAG clock divider: No PLL means must be at least 15 (which is 1/16th clock speed)
#jtag_speed  5

##6. I get the following message in the OpenOCD console (or log file):
##   "Warning: arm7_9_common.c:679 arm7_9_assert_reset(): srst resets
##   test logic, too".

##   This warning doesn't indicate any serious problem, as long as you
##   don't want to debug your core right out of reset. Your .cfg file
##   specified `jtag_reset trst_and_srst srst_pulls_trst' to tell the
##   OpenOCD that either your board, your debugger or your target uC
##   (e.g. LPC2000) can't assert the two reset signals independently.
##   With this setup, it's not possible to halt the core right out of
##   reset, everything else should work fine.

# We have separated JTAG and LPC resets, but the LPC reset resets the JTAG reset
reset_config  trst_and_srst  srst_pulls_trst

#JTAG chain: [IR length] [IR Capture] [IR mask] [IDCODE Inst.]
jtag_device  4           0x1          0xf       0xe

#----------- FT2232 Options

ft2232_device_desc "Olimex OpenOCD JTAG"  # Only for FTD2XX drivers: changed from  "... JTAG A" to "... JTAG" - why?
ft2232_layout      "olimex-jtag"
ft2232_vid_pid     0x15BA  0x0003

#-------- Target Configuration

#target [type]   [endian] [reset mode]  [chainpos] [variant]
target  arm7tdmi little   run_and_halt  0          arm7tdmi-s_r4

# Time to wait before halting
#                 [JTAG #]  [wait in ms]
#run_and_halt_time 0         30
run_and_halt_time 0         1000

# Force everything to use hardware breakpoints since we're debugging from flash
arm7_9 force_hw_bkpts enable

#-------- Working area (debugging, on-the-fly coding)

# RAM to use when writing to flash (temporary copy)
# locatations from memory map-ram starts at  0x4000 0000
#working_area  [target#]  [address]    [size]   ['backup'|'nobackup']
working_area   0          0x40000000   0x8000   nobackup

#-------- Flash configuration

#LPC2148 @ 12MHz / 0x80000 from 512*1024...plus/minus 1 issue, lets not push it.
# 0x0008 0000 is reserved address...
#flash bank [driver] [base] [size]  [chip_width] [bus_width] [target#] [variant]  [freq] [cksum]
flash  bank lpc2000  0      0x80000 0            0           0         lpc2000_v2 12000  calc_checksum


#-------- Scripts

#target_script [target#] [event] [script_file]
#target_script  0         reset   oocd_flash_lpc2148.script
